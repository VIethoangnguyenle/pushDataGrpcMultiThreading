plugins {
	id 'org.springframework.boot' version '2.5.5'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'com.google.protobuf' version '0.8.14'
}

group = 'com.hoang'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	//GSON
	implementation 'com.google.code.gson:gson:2.8.7'

	//JSON
	implementation 'org.json:json:20171018'

	//Log
	implementation "net.logstash.logback:logstash-logback-encoder:6.6"
	implementation "ch.qos.logback:logback-classic:1.2.3"


	// grpc, protobuf
	implementation 'io.github.lognet:grpc-spring-boot-starter:4.5.5'
	implementation group: 'com.google.protobuf', name: 'protobuf-java', version: '3.14.0'
	implementation group: 'com.google.protobuf', name: 'protobuf-java-util', version: '3.14.0'
	implementation 'com.google.protobuf:protobuf-gradle-plugin:0.8.16'

	//Log
	implementation "net.logstash.logback:logstash-logback-encoder:6.6"
	implementation "ch.qos.logback:logback-classic:1.2.3"

//	==== HIBERNATE/JPA ====
	implementation group: 'org.hibernate', name: 'hibernate-core', version: '5.5.3.Final'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'

	runtimeOnly 'org.postgresql:postgresql'

	implementation group: 'io.netty', name: 'netty-all', version: '4.1.67.Final'
}


sourceSets {
	main {
		proto {
			srcDirs = [
					'src/main/java/com/hoang/plugins/proto',
			]
		}
		java {
			srcDir 'src/main/protoGen'
		}
	}
}

protobuf {
	protoc {
		artifact = 'com.google.protobuf:protoc:3.14.0'
	}
	plugins {
		grpc {
			artifact = "io.grpc:protoc-gen-grpc-java:1.39.0"
		}
	}

	generateProtoTasks {
		ofSourceSet('main').each { task ->
			task.builtins {
				java {
					outputSubDir = 'protoGen'
				}
			}
			task.plugins {
				grpc {
					outputSubDir = 'protoGen'
				}
			}
		}
	}
	generatedFilesBaseDir = "$projectDir/src/"
}

task cleanProtoGen {
	doFirst {
		delete("$projectDir/src/main/protoGen")
	}
}

clean.dependsOn cleanProtoGen

test {
	useJUnitPlatform()
}
